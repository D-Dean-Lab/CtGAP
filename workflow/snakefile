import sys
from pathlib import Path
from rich import print as pprint

configfile: "config/config.yaml"
include: "rules/common.smk"

# inputs
INDIR = Path(config["indir"])
OUTDIR = Path(config["outdir"])
SAMPLESHEET = Path(config['sample_sheet'])

# references
HUMANREF = Path(config["homoReference"])
SCAFFOLDREF = Path(config["scaffoldReference"])

# databaes
KRAKENDB = Path(config["krakenDB"])
OMPABLASTDB = Path(config["ompaBlastDB"])
MLSTDB = Path(config["mlstDB"])

#misc
ADAPTERS = Path(config["adapters"])
MODE = config['mode']
ORG = config['organism']

# reference configuration
if config["reference"] == "plurality":
	REF = Path("resources/references/{ORG}/ct_plurality.fasta")
elif config["reference"] == "reference_24":
	REF = Path("resources/references/{ORG}/ct_refset_24.fasta")
else:
	REF = Path(f"resources/references/{ORG}/individual/{config['reference']}")

# get samples
SAMPLE_NAME, PAIR = glob_wildcards(INDIR / "{sample_name}_{pair}.fastq.gz")
SAMPLES = set(SAMPLE_NAME)
# dictReads = parseSamples(SAMPLESHEET)
# SAMPLES = list(dictReads.keys())
if not SAMPLES:
	pprint("[yellow]No input samples were detected. Check the files are named properly:[/yellow] [green bold]{sample_name}_{pair}[/green bold]")
	sys.exit()

rule all:
	input:
		# denovo
		#OUTDIR / "status" / "denovo.collate.blast.txt",
		# ref-denovo
		expand(OUTDIR / "status" / "ref-denovo.mlst.{sample}.txt", sample = SAMPLES),
		OUTDIR / "status" / "refdenovo.collage.coverage.txt",
		OUTDIR / "status" / "refdenovo.collate.blast.txt",

# common modules
include: "rules/1-trim.smk"
include: "rules/2-scrub.smk"
include: "rules/3-qc.smk"

# modes module
if config['mode'] == 'denovo':
	include: "rules/4-assemble.smk"
elif config['mode'] == 'ref-denovo':
	include: "rules/5-align.smk"
elif config['mode'] == 'both':
	include: "rules/4-assemble.smk"
	include: "rules/5-align.smk"

# analysis module
include: "rules/collate.smk"
